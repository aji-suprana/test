{
    "name": "ContinuesIntegration",
    "on": {
        "push": {
            "branches": [
                "master",
                "develop",
                "feature/cicd"
            ]
        }
    },
    "jobs": {
        "ECR-PUSH": {
            "name": "Build Image and Push to ECR",
            "runs-on": "ubuntu-latest",
            "container": "ubuntu",
            "services": {
                "mydb": {
                    "image": "mysql:5.7",
                    "env": {
                        "MYSQL_ROOT_PASSWORD": "password"
                    },
                    "options": "--health-cmd=\"mysqladmin ping\" --health-interval=10s --health-timeout=5s --health-retries=5"
                }
            },
            "steps": [
                {
                    "uses": "actions/setup-node@v2-beta",
                    "with": {
                        "node-version": "10"
                    }
                },
                {
                    "name": "Install npm",
                    "run": "npm install jest\nnpm install sequelize-cli\n"
                },
                {
                    "name": "Verify MySQL connection from container",
                    "run": "apt-get update\napt-get install -y mysql-client\nmysql --host mydb -uroot -ppassword -e \"SHOW DATABASES\"\n"
                },
                {
                    "name": "Checkout",
                    "uses": "actions/checkout@v1"
                },
                {
                    "name": "Extract branch name",
                    "shell": "bash",
                    "run": "echo \"##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})\"",
                    "id": "extract_branch"
                },
                {
                    "name": "setup database",
                    "run": "npm install dotenv\nNODE_ENV=test npx sequelize-cli db:create --env test \nNODE_ENV=test npx sequelize-cli db:migrate --env test \ncp ./env/test.env ./.env\n"
                },
                {
                    "name": "Unit Testing",
                    "run": "npm test"
                },
                {
                    "name": "Configure AWS credentials",
                    "uses": "aws-actions/configure-aws-credentials@v1",
                    "with": {
                        "aws-access-key-id": "${{ secrets.AWS_ACCESS_KEY_ID }}",
                        "aws-secret-access-key": "${{ secrets.AWS_SECRET_ACCESS_KEY }}",
                        "aws-region": "ap-southeast-1"
                    }
                },
                {
                    "name": "Login to Amazon ECR",
                    "id": "login-ecr",
                    "uses": "aws-actions/amazon-ecr-login@v1"
                },
                {
                    "name": "vbs-authentication-appIMAGE",
                    "id": "build-master-image",
                    "env": {
                        "ECR_REGISTRY": "${{ steps.login-ecr.outputs.registry }}",
                        "ECR_REPOSITORY": "my-ecr-repo",
                        "IMAGE_TAG": "vbs-authentication-app"
                    },
                    "run": "docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f docker/nodeapp/Dockerfile .\ndocker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\necho \"::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\"\n"
                },
                {
                    "name": "MYSQL image",
                    "id": "build-mysql-image",
                    "env": {
                        "ECR_REGISTRY": "${{ steps.login-ecr.outputs.registry }}",
                        "ECR_REPOSITORY": "my-ecr-repo",
                        "IMAGE_TAG": "vbs-authentication-app"
                    },
                    "run": "docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f docker/db/Dockerfile .\ndocker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\necho \"::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\"\n"
                }
            ]
        }
    }
}